author: user1
email: user1@abc_xyz.com
company: ABC XYZ Inc.

fmt_with_save_to: 'dgs build %s "%s" --save-to="%s"'

unittest:
  fmt: 'dgs build unittest_script "%s" --author="{self.author}" --email="{self.email}" --company="{self.company}"'
  expected_result: |-
    ################################################################################
    # unittest script is generated by Describe-Get-System Proof of Concept
    # Created by  : user1
    # Email       : user1@abc_xyz.com
    # Company     : ABC XYZ Inc.
    # Created date: yyyy-mm-dd
    ################################################################################
    
    import unittest
    import dgspoc as ta
    
    
    def get_logger(name='TATestScript'):
        """This function only creates logger instance with
        basic logging configuration.
        ==================================================
        PLEASE UPDATE your get_logger function.
        ==================================================
        """
        import logging
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(levelname)s] %(message)s",
            handlers=[
                logging.FileHandler('%s.log' % name.lower()),
                logging.StreamHandler()
            ]
        )
        logger = logging.getLogger(name)
        return logger
    
    
    class TestClass(unittest.TestCase):
        logger = get_logger()
    
        @classmethod
        def setUpClass(cls):
            cls.device1 = ta.connect_device('1.1.1.1')
    
        @classmethod
        def tearDownClass(cls):
            ta.disconnect_device(cls.device1)
            ta.release_device(cls.device1)
    
        def test_001_precondition(self):
            """precondition"""
            output = ta.execute(self.device1, cmdline='show modules')
            result = ta.convert_and_filter(
                output, convertor='template', template_ref='show_modules_tmpl',
                select_statement='SELECT * WHERE version >= version(1.0.0)'
            )
            total_count = len(result)
            self.assertTrue(total_count >= 2)
    
    if __name__ == '__main__':
        unittest.main()

pytest:
  fmt: 'dgs build pytest_script "%s" --author="{self.author}" --email="{self.email}" --company="{self.company}"'
  expected_result: |-
    ################################################################################
    # pytest script is generated by Describe-Get-System Proof of Concept
    # Created by  : user1
    # Email       : user1@abc_xyz.com
    # Company     : ABC XYZ Inc.
    # Created date: yyyy-mm-dd
    ################################################################################
    
    # import pytest
    import dgspoc as ta
    
    
    def get_logger(name='TATestScript'):
        """This function only creates logger instance with
        basic logging configuration.
        ==================================================
        PLEASE UPDATE your get_logger function.
        ==================================================
        """
        import logging
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(levelname)s] %(message)s",
            handlers=[
                logging.FileHandler('%s.log' % name.lower()),
                logging.StreamHandler()
            ]
        )
        logger = logging.getLogger(name)
        return logger
    
    
    class TestClass:
        logger = get_logger()
    
        def setup_class(self):
            self.device1 = ta.connect_device('1.1.1.1')
    
        def teardown_class(self):
            ta.disconnect_device(self.device1)
            ta.release_device(self.device1)
    
        def test_001_precondition(self):
            """precondition"""
            output = ta.execute(self.device1, cmdline='show modules')
            result = ta.convert_and_filter(
                output, convertor='template', template_ref='show_modules_tmpl',
                select_statement='SELECT * WHERE version >= version(1.0.0)'
            )
            total_count = len(result)
            assert total_count >= 2

robotframework:
  fmt: 'dgs build robotframework_script "%s" --author="{self.author}" --email="{self.email}" --company="{self.company}"'
  expected_result: |-
    ################################################################################
    # robotframework script is generated by Describe-Get-System Proof of Concept
    # Created by  : user1
    # Email       : user1@abc_xyz.com
    # Company     : ABC XYZ Inc.
    # Created date: yyyy-mm-dd
    ################################################################################
    
    *** Settings ***
    Library          BuiltIn
    Library          Collections
    Library          dgspoc.robotframeworklib
    Suite Setup      setup
    Suite Teardown   teardown
    
    *** Keywords ***
    setup
        ${device1}=   connect device   1.1.1.1
        set global variable   ${device1}
    
    teardown
        disconnect device   ${device1}
        release device   ${device1}
    
    *** Test Cases ***
    test 001 precondition
        [Documentation]    precondition
        ${output}=   execute   ${device1}   cmdline=show modules
        ${result}=   convert_and_filter
        ...   ${output}   convertor=template   template_ref=show_modules_tmpl
        ...   select_statement=SELECT * WHERE version >= version(1.0.0)
        ${total_count}=  get length   ${result}
        should be true   ${total_count} >= 2



