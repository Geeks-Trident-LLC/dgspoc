indentation: 2

user_info:
  username: user1
  email: user1@abc_xyz.com
  company: ABC XYZ Inc.

setup_statement:

  default:
    data: setup
    unittest: |-
      ############ skip this line ############
        def setUp(self):
          print('Dummy Setup')
          self.assertTrue(True == True)
    pytest: |-
      ############ skip this line ############
        def setup_class(self):
          print('Dummy Setup')
          assert True == True
    robotframework: |-
      ############ skip this line ############
      setup
        log   Dummy Setup
        should be true   True == True

  case1:
    data: |-
      setup
        connect data test_resource.yaml
    unittest: |-
      ############ skip this line ############
        def setUp(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
    pytest: |-
      ############ skip this line ############
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
    robotframework: |-
      ############ skip this line ############
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}

  case2:
    data: |-
      setup
        connect data test_resource.yaml
        use testcase test1
    unittest: |-
      ############ skip this line ############
        def setUp(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
    pytest: |-
      ############ skip this line ############
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
    robotframework: |-
      ############ skip this line ############
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}
        ${test_data}=  use testcase   ${test_resource}  testcase=test1
        set global variable   ${test_data}

  case3:
    data: |-
      setup
        connect data test_resource.yaml
        use testcase test1
        connect device device1
    unittest: |-
      ############ skip this line ############
        def setUp(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
          self.device1 = ta.connect_device(self.test_resource, name='device1')
    pytest: |-
      ############ skip this line ############
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
          self.device1 = ta.connect_device(self.test_resource, name='device1')
    robotframework: |-
      ############ skip this line ############
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}
        ${test_data}=  use testcase   ${test_resource}  testcase=test1
        set global variable   ${test_data}
        ${device1}=   connect device   ${test_resource}   name=device1
        set global variable   ${device1}

connect_data_statement:

  case1:
    data: connect data test_resource.yaml
    unittest: self.test_resource = ta.connect_data(filename='test_resource.yaml')
    pytest: self.test_resource = ta.connect_data(filename='test_resource.yaml')
    robotframework: |-
      ${test_resource}=   connect data   filename=test_resource.yaml
      set global variable   ${test_resource}

  case2:
    data: connect data test_resource.yaml as my_test_resource_var
    unittest: self.my_test_resource_var = ta.connect_data(filename='test_resource.yaml')
    pytest: self.my_test_resource_var = ta.connect_data(filename='test_resource.yaml')
    robotframework: |-
      ${my_test_resource_var}=   connect data   filename=test_resource.yaml
      set global variable   ${my_test_resource_var}

use_testcase_statement:

  case1:
    data: use testcase test1
    unittest: self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
    pytest: self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
    robotframework: |-
      ${test_data}=  use testcase   ${test_resource}  testcase=test1
      set global variable   ${test_data}

  case2:
    data:  use testcase test1 as test_data_var
    unittest: self.test_data_var = ta.use_testcase(self.test_resource, testcase='test1')
    pytest: self.test_data_var = ta.use_testcase(self.test_resource, testcase='test1')
    robotframework: |-
      ${test_data_var}=  use testcase   ${test_resource}  testcase=test1
      set global variable   ${test_data_var}

connect_device_statement:

  case1:
    data: connect device device1
    unittest: self.device1 = ta.connect_device(self.test_resource, name='device1')
    pytest: self.device1 = ta.connect_device(self.test_resource, name='device1')
    robotframework: |-
      ${device1}=   connect device   ${test_resource}   name=device1
      set global variable   ${device1}

  case2:
    data: connect device device1, device5, device8
    unittest: |-
      self.device1 = ta.connect_device(self.test_resource, name='device1')
      self.device2 = ta.connect_device(self.test_resource, name='device5')
      self.device3 = ta.connect_device(self.test_resource, name='device8')
    pytest: |-
      self.device1 = ta.connect_device(self.test_resource, name='device1')
      self.device2 = ta.connect_device(self.test_resource, name='device5')
      self.device3 = ta.connect_device(self.test_resource, name='device8')
    robotframework: |-
      ${device1}=   connect device   ${test_resource}   name=device1
      set global variable   ${device1}
      ${device2}=   connect device   ${test_resource}   name=device5
      set global variable   ${device2}
      ${device3}=   connect device   ${test_resource}   name=device8
      set global variable   ${device3}

  case3:
    data: connect device device1 as first_device, device5 as second_device, device8 as third_device
    unittest: |-
      self.first_device = ta.connect_device(self.test_resource, name='device1')
      self.second_device = ta.connect_device(self.test_resource, name='device5')
      self.third_device = ta.connect_device(self.test_resource, name='device8')
    pytest: |-
      self.first_device = ta.connect_device(self.test_resource, name='device1')
      self.second_device = ta.connect_device(self.test_resource, name='device5')
      self.third_device = ta.connect_device(self.test_resource, name='device8')
    robotframework: |-
      ${first_device}=   connect device   ${test_resource}   name=device1
      set global variable   ${first_device}
      ${second_device}=   connect device   ${test_resource}   name=device5
      set global variable   ${second_device}
      ${third_device}=   connect device   ${test_resource}   name=device8
      set global variable   ${third_device}

  case4:
    data: connect device device1, device5 as peer_device, device8
    unittest: |-
      self.device1 = ta.connect_device(self.test_resource, name='device1')
      self.peer_device = ta.connect_device(self.test_resource, name='device5')
      self.device2 = ta.connect_device(self.test_resource, name='device8')
    pytest: |-
      self.device1 = ta.connect_device(self.test_resource, name='device1')
      self.peer_device = ta.connect_device(self.test_resource, name='device5')
      self.device2 = ta.connect_device(self.test_resource, name='device8')
    robotframework: |-
      ${device1}=   connect device   ${test_resource}   name=device1
      set global variable   ${device1}
      ${peer_device}=   connect device   ${test_resource}   name=device5
      set global variable   ${peer_device}
      ${device2}=   connect device   ${test_resource}   name=device8
      set global variable   ${device2}

  case5:
    data: connect device {device1, device5 as peer_device, device8}
    unittest: |-
      self.device1 = ta.connect_device(self.test_resource, name='device1')
      self.peer_device = ta.connect_device(self.test_resource, name='device5')
      self.device2 = ta.connect_device(self.test_resource, name='device8')
    pytest: |-
      self.device1 = ta.connect_device(self.test_resource, name='device1')
      self.peer_device = ta.connect_device(self.test_resource, name='device5')
      self.device2 = ta.connect_device(self.test_resource, name='device8')
    robotframework: |-
      ${device1}=   connect device   ${test_resource}   name=device1
      set global variable   ${device1}
      ${peer_device}=   connect device   ${test_resource}   name=device5
      set global variable   ${peer_device}
      ${device2}=   connect device   ${test_resource}   name=device8
      set global variable   ${device2}

disconnect_device_statement:

  case1:
    data: disconnect device device1
    unittest: ta.disconnect_device(self.device1)
    pytest: ta.disconnect_device(self.device1)
    robotframework: |-
      disconnect device   ${device1}

  case2:
    data: disconnect device1
    unittest: ta.disconnect_device(self.device1)
    pytest: ta.disconnect_device(self.device1)
    robotframework: |-
      disconnect device   ${device1}

release_device_statement:

  case1:
    data: release device device1
    unittest: ta.release_device(self.device1)
    pytest: ta.release_device(self.device1)
    robotframework: |-
      release device   ${device1}

release_resource_statement:

  case1:
    data: release resource test_resource.yaml
    unittest: ta.release_resource(self.test_resource)
    pytest: ta.release_resource(self.test_resource)
    robotframework: |-
      release resource   ${test_resource}

cleanup_statement:

  default:
    data: cleanup
    unittest: |-
      ############ skip this line ############
        def cleanUp(self):
          print('Dummy Cleanup')
          self.assertTrue(True == True)
    pytest: |-
      ############ skip this line ############
        def cleanup_class(self):
          print('Dummy Cleanup')
          assert True == True
    robotframework: |-
      ############ skip this line ############
      cleanup
        log   Dummy Cleanup
        should be true   True == True

  case1:
    data: |-
      cleanup
        disconnect device device1
        release device device1
        release resource test_resource.yaml
    unittest: |-
      ############ skip this line ############
        def cleanUp(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
    pytest: |-
      ############ skip this line ############
        def cleanup_class(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
    robotframework: |-
      ############ skip this line ############
      cleanup
        disconnect device   ${device1}
        release device   ${device1}
        release resource   ${test_resource}

teardown_statement:

  default:
    data: teardown
    unittest: |-
      ############ skip this line ############
        def tearDown(self):
          print('Dummy Teardown')
          self.assertTrue(True == True)
    pytest: |-
      ############ skip this line ############
        def teardown_class(self):
          print('Dummy Teardown')
          assert True == True
    robotframework: |-
      ############ skip this line ############
      teardown
        log   Dummy Teardown
        should be true   True == True

  case1:
    data: |-
      teardown
        disconnect device device1
        release device device1
        release resource test_resource.yaml
    unittest: |-
      ############ skip this line ############
        def tearDown(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
    pytest: |-
      ############ skip this line ############
        def teardown_class(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
    robotframework: |-
      ############ skip this line ############
      teardown
        disconnect device   ${device1}
        release device   ${device1}
        release resource   ${test_resource}

performer_statement:

  case1:
    data: device1 EXECUTE show version
    unittest: "ta.execute(device1, cmdline='show version')"
    pytest: "ta.execute(device1, cmdline='show version')"
    robotframework: "execute   ${device1}   cmdline=show version"

  case2:
    data: device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version gt 1.2.3
    unittest: |-
      output= ta.execute(device1, cmdline='show version')
      ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                select_statement='SELECT version WHERE version gt 1.2.3')
    pytest: |-
      output= ta.execute(device1, cmdline='show version')
      ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                select_statement='SELECT version WHERE version gt 1.2.3')
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version
      filter   ${output}   convertor=template   template_ref=tmpl.show.version
      ...   select_statement=SELECT version WHERE version gt 1.2.3

  case3:
    data: device1 EXECUTE show version | cvs-format USING_CSV SELECT version WHERE version gt 1.2.3
    unittest: |-
      output= ta.execute(device1, cmdline='show version | cvs-format')
      ta.filter(output, convertor='csv',
                select_statement='SELECT version WHERE version gt 1.2.3')
    pytest: |-
      output= ta.execute(device1, cmdline='show version | cvs-format')
      ta.filter(output, convertor='csv',
                select_statement='SELECT version WHERE version gt 1.2.3')
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version | cvs-format
      filter   ${output}   convertor=csv
      ...   select_statement=SELECT version WHERE version gt 1.2.3

  case4:
    data: device1 EXECUTE show version | json-format USING_JSON SELECT version WHERE version gt 1.2.3
    unittest: |-
      output= ta.execute(device1, cmdline='show version | json-format')
      ta.filter(output, convertor='json',
                select_statement='SELECT version WHERE version gt 1.2.3')
    pytest: |-
      output= ta.execute(device1, cmdline='show version | json-format')
      ta.filter(output, convertor='json',
                select_statement='SELECT version WHERE version gt 1.2.3')
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version | json-format
      filter   ${output}   convertor=json
      ...   select_statement=SELECT version WHERE version gt 1.2.3

verification_statement:

  case1:
    data: device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version gt 1.2.3 MUST BE True
    unittest: |-
      output= ta.execute(device1, cmdline='show version')
      result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                         select_statement='SELECT version WHERE version gt 1.2.3')
      total_count = len(result)
      self.assertTrue(total_count == 1)
    pytest: |-
      output= ta.execute(device1, cmdline='show version')
      result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                         select_statement='SELECT version WHERE version gt 1.2.3')
      total_count = len(result)
      assert total_count == 1
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version
      ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.version
      ...   select_statement=SELECT version WHERE version gt 1.2.3
      ${total_count}=  get length   ${result}
      should be true   ${total_count} == 1

  case2:
    data: device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version gt 1.2.3 MUST BE EQUAL_TO 1
    unittest: |-
      output= ta.execute(device1, cmdline='show version')
      result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                         select_statement='SELECT version WHERE version gt 1.2.3')
      total_count = len(result)
      self.assertTrue(total_count == 1)
    pytest: |-
      output= ta.execute(device1, cmdline='show version')
      result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                         select_statement='SELECT version WHERE version gt 1.2.3')
      total_count = len(result)
      assert total_count == 1
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version
      ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.version
      ...   select_statement=SELECT version WHERE version gt 1.2.3
      ${total_count}=  get length   ${result}
      should be true   ${total_count} == 1

waitfor_statement:

  case1:
    data: sleep 10 seconds
    unittest: "ta.wait_for(10)"
    pytest: "ta.wait_for(10)"
    robotframework: "wait for   10"

  case2:
    data: wait for 10.12 seconds
    unittest: "ta.wait_for(10.12)"
    pytest: "ta.wait_for(10.12)"
    robotframework: "wait for   10.12"

  case3:
    data: "wait for 3 minutes"
    unittest: "ta.wait_for(180)"
    pytest: "ta.wait_for(180)"
    robotframework: "wait for   180"

  case4:
    data: "wait for 1.5 hrs"
    unittest: "ta.wait_for(5400)"
    pytest: "ta.wait_for(5400)"
    robotframework: "wait for   5400"

script_builder:
  default:
    data: |-
      setup
      teardown
    unittest: |-
      ################################################################################
      # unittest script is generated by Describe-Get-System Proof of Concept
      ################################################################################
      
      import unittest
      import dgspoc as ta
      
      
      class TestClass(unittest.Testcase):
        def setUp(self):
          print('Dummy Setup')
          self.assertTrue(True == True)
      
        def tearDown(self):
          print('Dummy Teardown')
          self.assertTrue(True == True)
    pytest: |-
      ################################################################################
      # pytest script is generated by Describe-Get-System Proof of Concept
      ################################################################################
      
      # import pytest
      import dgspoc as ta
      
      
      class TestClass:
        def setup_class(self):
          print('Dummy Setup')
          assert True == True
      
        def teardown_class(self):
          print('Dummy Teardown')
          assert True == True
    robotframework: |-
      ################################################################################
      # robotframework script is generated by Describe-Get-System Proof of Concept
      ################################################################################
      
      *** Settings ***
      library         builtin
      library         collections
      library         describegetsystempoc
      test setup      setup
      test teardown   teardown
      
      *** Keywords ***
      setup
        log   Dummy Setup
        should be true   True == True
      
      teardown
        log   Dummy Teardown
        should be true   True == True

  default_with_user_info:
    data: |-
      setup
      teardown
    unittest: |-
      ################################################################################
      # unittest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      import unittest
      import dgspoc as ta
      
      
      class TestClass(unittest.Testcase):
        def setUp(self):
          print('Dummy Setup')
          self.assertTrue(True == True)
      
        def tearDown(self):
          print('Dummy Teardown')
          self.assertTrue(True == True)
    pytest: |-
      ################################################################################
      # pytest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      # import pytest
      import dgspoc as ta
      
      
      class TestClass:
        def setup_class(self):
          print('Dummy Setup')
          assert True == True
      
        def teardown_class(self):
          print('Dummy Teardown')
          assert True == True
    robotframework: |-
      ################################################################################
      # robotframework script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      *** Settings ***
      library         builtin
      library         collections
      library         describegetsystempoc
      test setup      setup
      test teardown   teardown
      
      *** Keywords ***
      setup
        log   Dummy Setup
        should be true   True == True
      
      teardown
        log   Dummy Teardown
        should be true   True == True

  case1:
    data: |-
      setup
        connect data test_resource.yaml
        use testcase test1
        connect device device1
      teardown
        disconnect device1
        release device device1
        release resource test_resource.yaml
    unittest: |-
      ################################################################################
      # unittest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      import unittest
      import dgspoc as ta
      
      
      class TestClass(unittest.Testcase):
        def setUp(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
          self.device1 = ta.connect_device(self.test_resource, name='device1')
      
        def tearDown(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
    pytest: |-
      ################################################################################
      # pytest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      # import pytest
      import dgspoc as ta
      
      
      class TestClass:
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
          self.device1 = ta.connect_device(self.test_resource, name='device1')
      
        def teardown_class(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
    robotframework: |-
      ################################################################################
      # robotframework script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      *** Settings ***
      library         builtin
      library         collections
      library         describegetsystempoc
      test setup      setup
      test teardown   teardown
      
      *** Keywords ***
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}
        ${test_data}=  use testcase   ${test_resource}  testcase=test1
        set global variable   ${test_data}
        ${device1}=   connect device   ${test_resource}   name=device1
        set global variable   ${device1}
      
      teardown
        disconnect device   ${device1}
        release device   ${device1}
        release resource   ${test_resource}