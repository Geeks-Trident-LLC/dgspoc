indentation: 2

user_info:
  username: user1
  email: user1@abc_xyz.com
  company: ABC XYZ Inc.

setup_statement:

  default:
    data: setup
    unittest: |-
      ############ skip this line ############
        @classmethod
        def setUpClass(cls):
          print('Dummy Setup')
          assert True == True
    pytest: |-
      ############ skip this line ############
        def setup_class(self):
          print('Dummy Setup')
          assert True == True
    robotframework: |-
      ############ skip this line ############
      setup
        log   Dummy Setup
        should be true   True == True

  case1:
    data: |-
      setup
        connect data test_resource.yaml
    unittest: |-
      ############ skip this line ############
        @classmethod
        def setUpClass(cls):
          cls.test_resource = ta.connect_data(filename='test_resource.yaml')
    pytest: |-
      ############ skip this line ############
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
    robotframework: |-
      ############ skip this line ############
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}

  case2:
    data: |-
      setup
        connect data test_resource.yaml
        use testcase test1
    unittest: |-
      ############ skip this line ############
        @classmethod
        def setUpClass(cls):
          cls.test_resource = ta.connect_data(filename='test_resource.yaml')
          cls.test_data = ta.use_testcase(cls.test_resource, testcase='test1')
    pytest: |-
      ############ skip this line ############
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
    robotframework: |-
      ############ skip this line ############
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}
        ${test_data}=  use testcase   ${test_resource}  testcase=test1
        set global variable   ${test_data}

  case3:
    data: |-
      setup
        connect data test_resource.yaml
        use testcase test1
        connect device device1
    unittest: |-
      ############ skip this line ############
        @classmethod
        def setUpClass(cls):
          cls.test_resource = ta.connect_data(filename='test_resource.yaml')
          cls.test_data = ta.use_testcase(cls.test_resource, testcase='test1')
          cls.device1 = ta.connect_device(cls.test_resource, name='device1')
    pytest: |-
      ############ skip this line ############
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
          self.device1 = ta.connect_device(self.test_resource, name='device1')
    robotframework: |-
      ############ skip this line ############
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}
        ${test_data}=  use testcase   ${test_resource}  testcase=test1
        set global variable   ${test_data}
        ${device1}=   connect device   ${test_resource}   name=device1
        set global variable   ${device1}

connect_data_statement:

  case1:
    data: connect data test_resource.yaml
    unittest: test_resource = ta.connect_data(filename='test_resource.yaml')
    pytest: test_resource = ta.connect_data(filename='test_resource.yaml')
    robotframework: |-
      ${test_resource}=   connect data   filename=test_resource.yaml

  case2:
    data: connect data test_resource.yaml as my_test_resource_var
    unittest: my_test_resource_var = ta.connect_data(filename='test_resource.yaml')
    pytest: my_test_resource_var = ta.connect_data(filename='test_resource.yaml')
    robotframework: |-
      ${my_test_resource_var}=   connect data   filename=test_resource.yaml

use_testcase_statement:

  case1:
    data: use testcase test1
    unittest: test_data = ta.use_testcase(test_resource, testcase='test1')
    pytest: test_data = ta.use_testcase(test_resource, testcase='test1')
    robotframework: |-
      ${test_data}=  use testcase   ${test_resource}  testcase=test1

  case2:
    data:  use testcase test1 as test_data_var
    unittest: test_data_var = ta.use_testcase(test_resource, testcase='test1')
    pytest: test_data_var = ta.use_testcase(test_resource, testcase='test1')
    robotframework: |-
      ${test_data_var}=  use testcase   ${test_resource}  testcase=test1

connect_device_statement:

  case1:
    data: connect device device1
    unittest: device1 = ta.connect_device(test_resource, name='device1')
    pytest: device1 = ta.connect_device(test_resource, name='device1')
    robotframework: |-
      ${device1}=   connect device   ${test_resource}   name=device1

  case2:
    data: connect device device1, device5, device8
    unittest: |-
      device1 = ta.connect_device(test_resource, name='device1')
      device2 = ta.connect_device(test_resource, name='device5')
      device3 = ta.connect_device(test_resource, name='device8')
    pytest: |-
      device1 = ta.connect_device(test_resource, name='device1')
      device2 = ta.connect_device(test_resource, name='device5')
      device3 = ta.connect_device(test_resource, name='device8')
    robotframework: |-
      ${device1}=   connect device   ${test_resource}   name=device1
      ${device2}=   connect device   ${test_resource}   name=device5
      ${device3}=   connect device   ${test_resource}   name=device8

  case3:
    data: connect device device1 as first_device, device5 as second_device, device8 as third_device
    unittest: |-
      first_device = ta.connect_device(test_resource, name='device1')
      second_device = ta.connect_device(test_resource, name='device5')
      third_device = ta.connect_device(test_resource, name='device8')
    pytest: |-
      first_device = ta.connect_device(test_resource, name='device1')
      second_device = ta.connect_device(test_resource, name='device5')
      third_device = ta.connect_device(test_resource, name='device8')
    robotframework: |-
      ${first_device}=   connect device   ${test_resource}   name=device1
      ${second_device}=   connect device   ${test_resource}   name=device5
      ${third_device}=   connect device   ${test_resource}   name=device8

  case4:
    data: connect device device1, device5 as peer_device, device8
    unittest: |-
      device1 = ta.connect_device(test_resource, name='device1')
      peer_device = ta.connect_device(test_resource, name='device5')
      device2 = ta.connect_device(test_resource, name='device8')
    pytest: |-
      device1 = ta.connect_device(test_resource, name='device1')
      peer_device = ta.connect_device(test_resource, name='device5')
      device2 = ta.connect_device(test_resource, name='device8')
    robotframework: |-
      ${device1}=   connect device   ${test_resource}   name=device1
      ${peer_device}=   connect device   ${test_resource}   name=device5
      ${device2}=   connect device   ${test_resource}   name=device8

  case5:
    data: connect device {device1, device5 as peer_device, device8}
    unittest: |-
      device1 = ta.connect_device(test_resource, name='device1')
      peer_device = ta.connect_device(test_resource, name='device5')
      device2 = ta.connect_device(test_resource, name='device8')
    pytest: |-
      device1 = ta.connect_device(test_resource, name='device1')
      peer_device = ta.connect_device(test_resource, name='device5')
      device2 = ta.connect_device(test_resource, name='device8')
    robotframework: |-
      ${device1}=   connect device   ${test_resource}   name=device1
      ${peer_device}=   connect device   ${test_resource}   name=device5
      ${device2}=   connect device   ${test_resource}   name=device8

disconnect_device_statement:

  case1:
    data: disconnect device device1
    unittest: ta.disconnect_device(device1)
    pytest: ta.disconnect_device(device1)
    robotframework: |-
      disconnect device   ${device1}

  case2:
    data: disconnect device1
    unittest: ta.disconnect_device(device1)
    pytest: ta.disconnect_device(device1)
    robotframework: |-
      disconnect device   ${device1}

release_device_statement:

  case1:
    data: release device device1
    unittest: ta.release_device(device1)
    pytest: ta.release_device(device1)
    robotframework: |-
      release device   ${device1}

release_resource_statement:

  case1:
    data: release resource test_resource.yaml
    unittest: ta.release_resource(self.test_resource)
    pytest: ta.release_resource(self.test_resource)
    robotframework: |-
      release resource   ${test_resource}


teardown_statement:

  default:
    data: teardown
    unittest: |-
      ############ skip this line ############
        @classmethod
        def tearDownClass(cls):
          print('Dummy Teardown')
          assert True == True
    pytest: |-
      ############ skip this line ############
        def teardown_class(self):
          print('Dummy Teardown')
          assert True == True
    robotframework: |-
      ############ skip this line ############
      teardown
        log   Dummy Teardown
        should be true   True == True

  case1:
    data: |-
      teardown
        disconnect device device1
        release device device1
        release resource test_resource.yaml
    unittest: |-
      ############ skip this line ############
        @classmethod
        def tearDownClass(cls):
          ta.disconnect_device(cls.device1)
          ta.release_device(cls.device1)
          ta.release_resource(self.test_resource)
    pytest: |-
      ############ skip this line ############
        def teardown_class(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
    robotframework: |-
      ############ skip this line ############
      teardown
        disconnect device   ${device1}
        release device   ${device1}
        release resource   ${test_resource}

section_statement:

  default:
    data: section
    unittest: |-
      ############ skip this line ############
        def test_step(self):
          print('Dummy for section')
          self.assertTrue(True == True)
    pytest: |-
      ############ skip this line ############
        def test_step(self):
          print('Dummy for section')
          assert True == True
    robotframework: |-
      ############ skip this line ############
      test_step
        log   Dummy for section
        should be true   True == True

  case1:
    data: |-
      section:
        device1 execute show version
    unittest: |-
      ############ skip this line ############
        def test_step(self):
          ta.execute(device1, cmdline='show version')
    pytest: |-
      ############ skip this line ############
        def test_step(self):
          ta.execute(device1, cmdline='show version')
    robotframework: |-
      ############ skip this line ############
      test_step
        execute   ${device1}   cmdline=show version

  case2:
    data: |-
      section:
        device1 execute show version
        loop 2 times
          device1 execute show device info
          wait for 5 seconds
        device1 execute show module info

    unittest: |-
      ############ skip this line ############
        def test_step(self):
          ta.execute(device1, cmdline='show version')
          ntimes = 2
          indexes = range(1, times + 1)
          for index in indexes:
            ta.execute(device1, cmdline='show device info')
            ta.wait_for(5)
          ta.execute(device1, cmdline='show module info')
    pytest: |-
      ############ skip this line ############
        def test_step(self):
          ta.execute(device1, cmdline='show version')
          ntimes = 2
          indexes = range(1, times + 1)
          for index in indexes:
            ta.execute(device1, cmdline='show device info')
            ta.wait_for(5)
          ta.execute(device1, cmdline='show module info')
    robotframework: |-
      ############ skip this line ############
      test_step
        execute   ${device1}   cmdline=show version
        ${ntimes}=   set variable   2
        @{indexes}=   evaluate   range(1, ${ntimes} + 1)
        FOR   ${index}   IN   @{indexes}
          execute   ${device1}   cmdline=show device info
          wait for   5
        END
        execute   ${device1}   cmdline=show module info

loop_statement:

  case1:
    data: loop 0 times
    unittest: ""
    pytest: ""
    robotframework: ""

  case2:
    data: loop 1 times
    unittest: |-
      ntimes = 1
      indexes = range(1, times + 1)
      for index in indexes:
        print('Dummy iterative statement')
        self.assertTrue(True == True)
    pytest: |-
      ntimes = 1
      indexes = range(1, times + 1)
      for index in indexes:
        print('Dummy iterative statement')
        assert True == True
    robotframework: |-
      ${ntimes}=   set variable   1
      @{indexes}=   evaluate   range(1, ${ntimes} + 1)
      FOR   ${index}   IN   @{indexes}
        log   Dummy iterative statement
        should be true   True == True
      END

  case3:
    data: |-
      loop 3 times
        device1 EXECUTE show info
        device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version >= version(1.0.0) MUST BE true
        device1 EXECUTE show device module
    unittest: |-
      ntimes = 3
      indexes = range(1, times + 1)
      for index in indexes:
        ta.execute(device1, cmdline='show info')
        output= ta.execute(device1, cmdline='show version')
        result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                           select_statement='SELECT version WHERE version >= version(1.0.0)')
        total_count = len(result)
        self.assertTrue(total_count == 1, msg='Failed at iteration {}/{}'.format(index, ntimes))
        ta.execute(device1, cmdline='show device module')
    pytest: |-
      ntimes = 3
      indexes = range(1, times + 1)
      for index in indexes:
        ta.execute(device1, cmdline='show info')
        output= ta.execute(device1, cmdline='show version')
        result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                           select_statement='SELECT version WHERE version >= version(1.0.0)')
        total_count = len(result)
        assert total_count == 1, 'Failed at iteration {}/{}'.format(index, ntimes)
        ta.execute(device1, cmdline='show device module')
    robotframework: |-
      ${ntimes}=   set variable   3
      @{indexes}=   evaluate   range(1, ${ntimes} + 1)
      FOR   ${index}   IN   @{indexes}
        execute   ${device1}   cmdline=show info
        {output}=   execute   ${device1}   cmdline=show version
        ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.version
        ...   select_statement=SELECT version WHERE version >= version(1.0.0)
        ${total_count}=  get length   ${result}
        should be true   ${total_count} == 1   Failed at iteration ${index}/${ntimes}
        execute   ${device1}   cmdline=show device module
      END

  case4:
    data: |-
      loop 3 times until
        device1 EXECUTE show info
        device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version >= version(1.0.0) MUST BE true
        device1 EXECUTE show device module
    unittest: |-
      ntimes = 3
      indexes = range(1, times + 1)
      is_passed = True
      for index in indexes:
        ta.execute(device1, cmdline='show info')
        output= ta.execute(device1, cmdline='show version')
        result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                           select_statement='SELECT version WHERE version >= version(1.0.0)')
        total_count = len(result)
        self.assertTrue(total_count == 1, msg='Failed at iteration {}/{}'.format(index, ntimes))
        ta.execute(device1, cmdline='show device module')
        if is_passed:
          break
    pytest: |-
      ntimes = 3
      indexes = range(1, times + 1)
      is_passed = True
      for index in indexes:
        ta.execute(device1, cmdline='show info')
        output= ta.execute(device1, cmdline='show version')
        result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                           select_statement='SELECT version WHERE version >= version(1.0.0)')
        total_count = len(result)
        assert total_count == 1, 'Failed at iteration {}/{}'.format(index, ntimes)
        ta.execute(device1, cmdline='show device module')
        if is_passed:
          break
    robotframework: |-
      ${ntimes}=   set variable   3
      @{indexes}=   evaluate   range(1, ${ntimes} + 1)
      ${is_passed}=   set variable   ${True}
      FOR   ${index}   IN   @{indexes}
        execute   ${device1}   cmdline=show info
        {output}=   execute   ${device1}   cmdline=show version
        ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.version
        ...   select_statement=SELECT version WHERE version >= version(1.0.0)
        ${total_count}=  get length   ${result}
        should be true   ${total_count} == 1   Failed at iteration ${index}/${ntimes}
        execute   ${device1}   cmdline=show device module
        exit for loop if   ${is_passed}
      END

  case5:
    data: |-
      loop 3 times to last
        device1 EXECUTE show info
        device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version >= version(1.0.0) MUST BE true
        device1 EXECUTE show device module
    unittest: |-
      ntimes = 3
      indexes = range(1, times + 1)
      is_passed = True
      for index in indexes:
        ta.execute(device1, cmdline='show info')
        output= ta.execute(device1, cmdline='show version')
        result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                           select_statement='SELECT version WHERE version >= version(1.0.0)')
        total_count = len(result)
        check = total_count == 1
        is_passed = is_passed and check
        ta.execute(device1, cmdline='show device module')
        if not is_passed:
          print('Warning: failed verification(s) at iteration {}/{}'.format(index, ntimes))
      self.assertTrue(is_passed)
    pytest: |-
      ntimes = 3
      indexes = range(1, times + 1)
      is_passed = True
      for index in indexes:
        ta.execute(device1, cmdline='show info')
        output= ta.execute(device1, cmdline='show version')
        result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                           select_statement='SELECT version WHERE version >= version(1.0.0)')
        total_count = len(result)
        check = total_count == 1
        is_passed = is_passed and check
        ta.execute(device1, cmdline='show device module')
        if not is_passed:
          print('Warning: failed verification(s) at iteration {}/{}'.format(index, ntimes))
      assert is_passed
    robotframework: |-
      ${ntimes}=   set variable   3
      @{indexes}=   evaluate   range(1, ${ntimes} + 1)
      ${is_passed}=   set variable   ${True}
      FOR   ${index}   IN   @{indexes}
        execute   ${device1}   cmdline=show info
        {output}=   execute   ${device1}   cmdline=show version
        ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.version
        ...   select_statement=SELECT version WHERE version >= version(1.0.0)
        ${total_count}=  get length   ${result}
        ${check}=   evaluate   ${total_count} == 1
        ${is_passed}=   evaluate   ${is_passed} and ${check}
        execute   ${device1}   cmdline=show device module
      run keyword if   ${is_passed} == False   Log   failed verification(s) at iteration ${index}/${ntimes}   WARN
      END
      should be true   ${is_passed}

performer_statement:

  case1:
    data: device1 EXECUTE show version
    unittest: "ta.execute(device1, cmdline='show version')"
    pytest: "ta.execute(device1, cmdline='show version')"
    robotframework: "execute   ${device1}   cmdline=show version"

  case2:
    data: device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version gt version(1.2.3)
    unittest: |-
      output= ta.execute(device1, cmdline='show version')
      ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                select_statement='SELECT version WHERE version gt version(1.2.3)')
    pytest: |-
      output= ta.execute(device1, cmdline='show version')
      ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                select_statement='SELECT version WHERE version gt version(1.2.3)')
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version
      filter   ${output}   convertor=template   template_ref=tmpl.show.version
      ...   select_statement=SELECT version WHERE version gt version(1.2.3)

  case3:
    data: device1 EXECUTE show version | cvs-format USING_CSV SELECT version WHERE version gt version(1.2.3)
    unittest: |-
      output= ta.execute(device1, cmdline='show version | cvs-format')
      ta.filter(output, convertor='csv',
                select_statement='SELECT version WHERE version gt version(1.2.3)')
    pytest: |-
      output= ta.execute(device1, cmdline='show version | cvs-format')
      ta.filter(output, convertor='csv',
                select_statement='SELECT version WHERE version gt version(1.2.3)')
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version | cvs-format
      filter   ${output}   convertor=csv
      ...   select_statement=SELECT version WHERE version gt version(1.2.3)

  case4:
    data: device1 EXECUTE show version | json-format USING_JSON SELECT version WHERE version gt version(1.2.3)
    unittest: |-
      output= ta.execute(device1, cmdline='show version | json-format')
      ta.filter(output, convertor='json',
                select_statement='SELECT version WHERE version gt version(1.2.3)')
    pytest: |-
      output= ta.execute(device1, cmdline='show version | json-format')
      ta.filter(output, convertor='json',
                select_statement='SELECT version WHERE version gt version(1.2.3)')
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version | json-format
      filter   ${output}   convertor=json
      ...   select_statement=SELECT version WHERE version gt version(1.2.3)

verification_statement:

  case1:
    data: device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version gt version(1.2.3) MUST BE True
    unittest: |-
      output= ta.execute(device1, cmdline='show version')
      result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                         select_statement='SELECT version WHERE version gt version(1.2.3)')
      total_count = len(result)
      self.assertTrue(total_count == 1)
    pytest: |-
      output= ta.execute(device1, cmdline='show version')
      result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                         select_statement='SELECT version WHERE version gt version(1.2.3)')
      total_count = len(result)
      assert total_count == 1
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version
      ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.version
      ...   select_statement=SELECT version WHERE version gt version(1.2.3)
      ${total_count}=  get length   ${result}
      should be true   ${total_count} == 1

  case2:
    data: device1 EXECUTE show version USING_TEMPLATE tmpl.show.version SELECT version WHERE version gt version(1.2.3) MUST BE EQUAL_TO 1
    unittest: |-
      output= ta.execute(device1, cmdline='show version')
      result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                         select_statement='SELECT version WHERE version gt version(1.2.3)')
      total_count = len(result)
      self.assertTrue(total_count == 1)
    pytest: |-
      output= ta.execute(device1, cmdline='show version')
      result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                         select_statement='SELECT version WHERE version gt version(1.2.3)')
      total_count = len(result)
      assert total_count == 1
    robotframework: |-
      {output}=   execute   ${device1}   cmdline=show version
      ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.version
      ...   select_statement=SELECT version WHERE version gt version(1.2.3)
      ${total_count}=  get length   ${result}
      should be true   ${total_count} == 1

waitfor_statement:

  case1:
    data: sleep 10 seconds
    unittest: "ta.wait_for(10)"
    pytest: "ta.wait_for(10)"
    robotframework: "wait for   10"

  case2:
    data: wait for 10.12 seconds
    unittest: "ta.wait_for(10.12)"
    pytest: "ta.wait_for(10.12)"
    robotframework: "wait for   10.12"

  case3:
    data: "wait for 3 minutes"
    unittest: "ta.wait_for(180)"
    pytest: "ta.wait_for(180)"
    robotframework: "wait for   180"

  case4:
    data: "wait for 1.5 hrs"
    unittest: "ta.wait_for(5400)"
    pytest: "ta.wait_for(5400)"
    robotframework: "wait for   5400"

script_builder:
  default:
    data: |-
      setup
      teardown
    unittest: |-
      ################################################################################
      # unittest script is generated by Describe-Get-System Proof of Concept
      ################################################################################
      
      import unittest
      import dgspoc as ta
      
      
      class TestClass(unittest.Testcase):
        @classmethod
        def setUpClass(cls):
          print('Dummy Setup')
          assert True == True
      
        @classmethod
        def tearDownClass(cls):
          print('Dummy Teardown')
          assert True == True
    pytest: |-
      ################################################################################
      # pytest script is generated by Describe-Get-System Proof of Concept
      ################################################################################
      
      # import pytest
      import dgspoc as ta
      
      
      class TestClass:
        def setup_class(self):
          print('Dummy Setup')
          assert True == True
      
        def teardown_class(self):
          print('Dummy Teardown')
          assert True == True
    robotframework: |-
      ################################################################################
      # robotframework script is generated by Describe-Get-System Proof of Concept
      ################################################################################
      
      *** Settings ***
      library         builtin
      library         collections
      library         describegetsystempoc
      test setup      setup
      test teardown   teardown
      
      *** Keywords ***
      setup
        log   Dummy Setup
        should be true   True == True
      
      teardown
        log   Dummy Teardown
        should be true   True == True

  default_with_user_info:
    data: |-
      setup
      teardown
    unittest: |-
      ################################################################################
      # unittest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      import unittest
      import dgspoc as ta
      
      
      class TestClass(unittest.Testcase):
        @classmethod
        def setUpClass(cls):
          print('Dummy Setup')
          assert True == True
      
        @classmethod
        def tearDownClass(cls):
          print('Dummy Teardown')
          assert True == True
    pytest: |-
      ################################################################################
      # pytest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      # import pytest
      import dgspoc as ta
      
      
      class TestClass:
        def setup_class(self):
          print('Dummy Setup')
          assert True == True
      
        def teardown_class(self):
          print('Dummy Teardown')
          assert True == True
    robotframework: |-
      ################################################################################
      # robotframework script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      *** Settings ***
      library         builtin
      library         collections
      library         describegetsystempoc
      test setup      setup
      test teardown   teardown
      
      *** Keywords ***
      setup
        log   Dummy Setup
        should be true   True == True
      
      teardown
        log   Dummy Teardown
        should be true   True == True

  case1:
    data: |-
      setup
        connect data test_resource.yaml
        use testcase test1
        connect device device1
      teardown
        disconnect device1
        release device device1
        release resource test_resource.yaml
    unittest: |-
      ################################################################################
      # unittest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      import unittest
      import dgspoc as ta
      
      
      class TestClass(unittest.Testcase):
        @classmethod
        def setUpClass(cls):
          cls.test_resource = ta.connect_data(filename='test_resource.yaml')
          cls.test_data = ta.use_testcase(cls.test_resource, testcase='test1')
          cls.device1 = ta.connect_device(cls.test_resource, name='device1')
      
        @classmethod
        def tearDownClass(cls):
          ta.disconnect_device(cls.device1)
          ta.release_device(cls.device1)
          ta.release_resource(self.test_resource)
    pytest: |-
      ################################################################################
      # pytest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      # import pytest
      import dgspoc as ta
      
      
      class TestClass:
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
          self.device1 = ta.connect_device(self.test_resource, name='device1')
      
        def teardown_class(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
    robotframework: |-
      ################################################################################
      # robotframework script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      *** Settings ***
      library         builtin
      library         collections
      library         describegetsystempoc
      test setup      setup
      test teardown   teardown
      
      *** Keywords ***
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}
        ${test_data}=  use testcase   ${test_resource}  testcase=test1
        set global variable   ${test_data}
        ${device1}=   connect device   ${test_resource}   name=device1
        set global variable   ${device1}
      
      teardown
        disconnect device   ${device1}
        release device   ${device1}
        release resource   ${test_resource}

  case2:
    data: |-
      setup
        connect data test_resource.yaml
        use testcase test1
        connect device device1
      
      section: precondition
        device1 execute show version using_template tmpl.show.version select version where version >= version(1.0.0) must be true
        device1 execute show device info
      
      section: case1
        device1 execute show module info
        device1 configure turn off module 1
        device1 execute show module info using_template tmpl.show.module.info select name, status where name == module-1 and status == off must be true
    
      section: case2
        device1 execute show module info
        device1 configure turn on module 1
        device1 execute show module info using_template tmpl.show.module.info select name, status where name == module-1 and status == on must be true
      
      teardown
        disconnect device1
        release device device1
        release resource test_resource.yaml
    unittest: |-
      ################################################################################
      # unittest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      import unittest
      import dgspoc as ta
      
      
      class TestClass(unittest.Testcase):
        @classmethod
        def setUpClass(cls):
          cls.test_resource = ta.connect_data(filename='test_resource.yaml')
          cls.test_data = ta.use_testcase(cls.test_resource, testcase='test1')
          cls.device1 = ta.connect_device(cls.test_resource, name='device1')
      
        @classmethod
        def tearDownClass(cls):
          ta.disconnect_device(cls.device1)
          ta.release_device(cls.device1)
          ta.release_resource(self.test_resource)
      
        def test_precondition(self):
          output= ta.execute(device1, cmdline='show version')
          result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                             select_statement='select version where version >= version(1.0.0)')
          total_count = len(result)
          self.assertTrue(total_count == 1)
          ta.execute(device1, cmdline='show device info')
      
        def test_case1(self):
          ta.execute(device1, cmdline='show module info')
          ta.execute(device1, cmdline='turn off module 1')
          output= ta.execute(device1, cmdline='show module info')
          result = ta.filter(output, convertor='template', template_ref='tmpl.show.module.info',
                             select_statement='select name, status where name == module-1 and status == off')
          total_count = len(result)
          self.assertTrue(total_count == 1)
      
        def test_case2(self):
          ta.execute(device1, cmdline='show module info')
          ta.execute(device1, cmdline='turn on module 1')
          output= ta.execute(device1, cmdline='show module info')
          result = ta.filter(output, convertor='template', template_ref='tmpl.show.module.info',
                             select_statement='select name, status where name == module-1 and status == on')
          total_count = len(result)
          self.assertTrue(total_count == 1)
    pytest: |-
      ################################################################################
      # pytest script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      # import pytest
      import dgspoc as ta
      
      
      class TestClass:
        def setup_class(self):
          self.test_resource = ta.connect_data(filename='test_resource.yaml')
          self.test_data = ta.use_testcase(self.test_resource, testcase='test1')
          self.device1 = ta.connect_device(self.test_resource, name='device1')
      
        def teardown_class(self):
          ta.disconnect_device(self.device1)
          ta.release_device(self.device1)
          ta.release_resource(self.test_resource)
      
        def test_precondition(self):
          output= ta.execute(device1, cmdline='show version')
          result = ta.filter(output, convertor='template', template_ref='tmpl.show.version',
                             select_statement='select version where version >= version(1.0.0)')
          total_count = len(result)
          assert total_count == 1
          ta.execute(device1, cmdline='show device info')
      
        def test_case1(self):
          ta.execute(device1, cmdline='show module info')
          ta.execute(device1, cmdline='turn off module 1')
          output= ta.execute(device1, cmdline='show module info')
          result = ta.filter(output, convertor='template', template_ref='tmpl.show.module.info',
                             select_statement='select name, status where name == module-1 and status == off')
          total_count = len(result)
          assert total_count == 1
      
        def test_case2(self):
          ta.execute(device1, cmdline='show module info')
          ta.execute(device1, cmdline='turn on module 1')
          output= ta.execute(device1, cmdline='show module info')
          result = ta.filter(output, convertor='template', template_ref='tmpl.show.module.info',
                             select_statement='select name, status where name == module-1 and status == on')
          total_count = len(result)
          assert total_count == 1
    robotframework: |-
      ################################################################################
      # robotframework script is generated by Describe-Get-System Proof of Concept
      # Created by  : user1
      # Email       : user1@abc_xyz.com
      # Company     : ABC XYZ Inc.
      ################################################################################
      
      *** Settings ***
      library         builtin
      library         collections
      library         describegetsystempoc
      test setup      setup
      test teardown   teardown
      
      *** Test Cases ***
      TestClass
        test_precondition
        test_case1
        test_case2
      
      *** Keywords ***
      setup
        ${test_resource}=   connect data   filename=test_resource.yaml
        set global variable   ${test_resource}
        ${test_data}=  use testcase   ${test_resource}  testcase=test1
        set global variable   ${test_data}
        ${device1}=   connect device   ${test_resource}   name=device1
        set global variable   ${device1}
      
      teardown
        disconnect device   ${device1}
        release device   ${device1}
        release resource   ${test_resource}
      
      test_precondition
        {output}=   execute   ${device1}   cmdline=show version
        ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.version
        ...   select_statement=select version where version >= version(1.0.0)
        ${total_count}=  get length   ${result}
        should be true   ${total_count} == 1
        execute   ${device1}   cmdline=show device info
      
      test_case1
        execute   ${device1}   cmdline=show module info
        execute   ${device1}   cmdline=turn off module 1
        {output}=   execute   ${device1}   cmdline=show module info
        ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.module.info
        ...   select_statement=select name, status where name == module-1 and status == off
        ${total_count}=  get length   ${result}
        should be true   ${total_count} == 1
      
      test_case2
        execute   ${device1}   cmdline=show module info
        execute   ${device1}   cmdline=turn on module 1
        {output}=   execute   ${device1}   cmdline=show module info
        ${result}=   filter   ${output}   convertor=template   template_ref=tmpl.show.module.info
        ...   select_statement=select name, status where name == module-1 and status == on
        ${total_count}=  get length   ${result}
        should be true   ${total_count} == 1